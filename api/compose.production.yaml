version: '3.9'

#todo move to .env variable
x-environment: &environment
  APP_NAME: Laravel
  APP_ENV: production
  APP_KEY: 'base64:YATW8fOGnL4XznjcaIloh9e4ub9N9IAeb+Gz8tyfzC0='
  APP_DEBUG: 'false'
  APP_URL: http://localhost:8000

  LOG_CHANNEL: stack
  LOG_DEPRECATIONS_CHANNEL: stack
  LOG_LEVEL: debug

  DB_CONNECTION: pgsql
  DB_HOST: postgres
  DB_PORT: 5432
  DB_DATABASE: app
  DB_USERNAME: app
  DB_PASSWORD: app

  BROADCAST_DRIVER: redis
  CACHE_DRIVER: redis
  FILESYSTEM_DISK: s3
  QUEUE_CONNECTION: redis
  SESSION_DRIVER: redis
  SESSION_LIFETIME: 120

  REDIS_HOST: redis
  REDIS_PASSWORD: null
  REDIS_PORT: 6379

  MAIL_MAILER: smtp
  MAIL_HOST: mailpit
  MAIL_PORT: 1025
  MAIL_USERNAME: null
  MAIL_PASSWORD: null
  MAIL_ENCRYPTION: null
  MAIL_FROM_ADDRESS: "hello@example.com"
  MAIL_FROM_NAME: Laravel

  AWS_ACCESS_KEY_ID:
  AWS_SECRET_ACCESS_KEY:
  AWS_DEFAULT_REGION: us-east-1
  AWS_BUCKET:
  AWS_USE_PATH_STYLE_ENDPOINT: 'false'

services:
  web:
    build:
      context: .
      dockerfile: production.Dockerfile
      target: build
    image: ${IMAGE_REGISTRY:-local}/${IMAGE_NAME:-api}:${IMAGE_TAG:-latest}
    environment: *environment
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    working_dir: /app
    ports:
      - "8000:8000"
    entrypoint: ./entrypoint.sh
    command: php artisan octane:start --server=swoole --host=0.0.0.0 --port=8000
    restart: unless-stopped
    healthcheck:
      test: php artisan octane:status || exit 1
      start_period: 5s
      interval: 5s
      timeout: 5s
      retries: 3

  schedule:
    build:
      context: .
      dockerfile: production.Dockerfile
      target: build
    image: ${IMAGE_REGISTRY:-local}/${IMAGE_NAME:-api}:${IMAGE_TAG:-latest}
    environment: *environment
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    working_dir: /app
    command: php artisan schedule:work
    restart: unless-stopped

  queue:
    build:
      context: .
      dockerfile: production.Dockerfile
      target: build
    image: ${IMAGE_REGISTRY:-local}/${IMAGE_NAME:-api}:${IMAGE_TAG:-latest}
    environment: *environment
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    working_dir: /app
    command: php artisan queue:work --tries=3
    restart: unless-stopped

  postgres:
    image: postgres:16.1-alpine
    environment:
      POSTGRES_DB: app
      POSTGRES_USER: app
      POSTGRES_PASSWORD: app
    volumes:
      - postgres:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: pg_isready -q -d app -U app
      interval: 5s
      timeout: 5s
      retries: 3

  redis:
    image: redis:6.2-alpine
    volumes:
      - redis:/data
    restart: unless-stopped
    healthcheck:
      test: redis-cli ping || exit 1
      interval: 5s
      timeout: 5s
      retries: 5

volumes:
  postgres:
    driver: local
  redis:
    driver: local
